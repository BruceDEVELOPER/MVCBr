{
  "name": "Delphi MVC Framework",
  "tagline": "DMVCFramework (for short) is a powerful framework for web solution in Delphi",
  "body": "## Features\r\n  * REALLY RESTful [RMM Level 3](http://martinfowler.com/articles/richardsonMaturityModel.html) compliant\r\n  * Can be used in load balanced environment using Redis (http://Redis.io) [dev]\r\n  * Fancy URL with parameter mappings\r\n  * URL and classes/methods name are completely decoupled by the router subsystem. So you can support nested resources using the same controller!\r\n  * Specialied renders to generate text, html, JSON\r\n  * Powerful mapper to map json to objects and datasets to objects\r\n  * Can be packaged as stand alone server, apache module (XE6, XE7, XE8) and ISAPI dll\r\n  * Integrated RESTClient\r\n  * Works with XE3 to 10 Seattle\r\n  * Completely unit tested\r\n  * There is a sample for each functionality\r\n  * There is a complete set of trainings about it, but the samples are included in the project\r\n  * Experimental support for IOCP [dev]\r\n  * Server side generated pages using Mustache\r\n  * Specific trainings are available (ask me for a date and a place)\r\n  * Messaging extension using STOMP (beta)\r\n  * Community driven (Facebook group https://www.facebook.com/groups/delphimvcframework)\r\n  * Simple and [documented](https://github.com/danieleteti/delphimvcframework/blob/master/docs/ITDevCON%202013%20-%20Introduction%20to%20DelphiMVCFramework.pdf)\r\n  \r\n\r\nDelphiMVCFramework contains also a lot of indipendent code that can be used in other kind of project. \r\n\r\nThese are the most notable:\r\n  * Mapper (convert JSON in Object and back, ObjectList in JSONArray and back, DataSets in JSONArray or ObjectList and back)\r\n\r\n##Samples and documentation\r\nDMVCFramework is provided with a lot of examples focused on specific functionality.\r\nAll samples are in [Samples](https://github.com/danieleteti/delphimvcframework/tree/master/samples) folder\r\n\r\n\r\n#Sample Controller\r\nBelow a basic sample of a DMVCFramework controller with 2 action\r\n\r\n```delphi\r\nunit UsersControllerU;\r\n  \r\ninterface\r\n  \r\nuses \r\n  MVCFramework;\r\n \r\ntype \r\n   [MVCPath('/users')]\r\n   TUsersController = class(TMVCController)\r\n   public\r\n    \r\n    //The following action will be with a GET request like the following\r\n    //http://myserver.com/users/3\r\n    [MVCPath('/($id)')]\r\n    [MVCProduce('application/json')]\r\n    [MVCHTTPMethod([httpGET])]\r\n    procedure GetUsers(CTX: TWebContext);\r\n\r\n    //The following action will be with a POST or PUT request like the following\r\n    //http://myserver.com/users/3\r\n    //and in the request body there should be a serialized TUser\r\n    [MVCPath('/($id)')]\r\n    [MVCProduce('application/json')]\r\n    [MVCHTTPMethod([httPOST, httpPUT])]\r\n    procedure UpdateOrCreateUser(CTX: TWebContext);\r\n\r\n  end;\r\n \r\nimplementation\r\n\r\nuses\r\n  MyTransactionScript; //contains actual data access code\r\n  \r\n{ TUsersController }\r\n \r\nprocedure TUsersController.GetUsers(CTX: TWebContext);\r\nvar\r\n  User: TUser;\r\nbegin\r\n  User := GetUserById(CTX.Request.Parameters['id'].ToInteger);\r\n  Render(User);\r\nend;\r\n\r\nprocedure TUsersController.UpdateOrCreateUser(CTX: TWebContext);\r\nvar\r\n  User: TUser;\r\nbegin\r\n  User := CTX.Request.BodyAs<TUser>;\r\n  SaveUser(User);\r\n  Render(User);\r\nend;\r\n\r\n  \r\nend.\r\n```\r\n\r\n\r\nFeel free to ask questions on the \"Delphi MVC Framework\" facebook group (https://www.facebook.com/groups/delphimvcframework).\r\n\r\n###Links\r\nhttp://www.danieleteti.it/2013/04/18/sneak-peek-to-simple-integration-between-dmvcframework-and-dorm/",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}