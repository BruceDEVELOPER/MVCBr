unit TestMVCBr.Patterns.Lazy;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, System.SysUtils, System.Generics.Collections, System.JSON,
  System.RTTI, Forms,
  System.TypInfo, System.Classes,
  MVCBr.Interf, MVCBr.Patterns.States,
  MVCBr.Patterns.Lazy,
  MVCBr.Patterns.Decorator,
  MVCBr.Patterns.Strategy,
  MVCBr.BuilderModel,
  MVCBr.Factory, MVCBr.Patterns.Builder;

type

  TLazyObject = class;

  TLazyObject = class
  public
    FCount: Integer;
    procedure Execute(AValue: Integer);
  end;

  TestTMVCBrLazyObject = class(TTestCase)
  Private
    lzObject: TMVCBrLazyFactory<TObject>;

  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCreateLazyObject;
    procedure TestLazyFactoryCreate;
    procedure TestAddCommand;
    procedure TestQueryCommand;
    procedure TestFreeInstance;
    procedure TestDelegate;
  end;



implementation



{ TestTMVCBrLazyObject }

procedure TestTMVCBrLazyObject.SetUp;
begin
  inherited;
  lzObject := TMVCBrLazyFactory<TObject>.Create;
end;

procedure TestTMVCBrLazyObject.TearDown;
begin
  inherited;
  lzObject.Free;
end;

procedure TestTMVCBrLazyObject.TestAddCommand;
begin
  lzObject.Add(1, TObject);
  lzObject.Add(2, TObject);
  checkTrue(lzObject.count = 2, 'Não incluir os itens');
end;

procedure TestTMVCBrLazyObject.TestCreateLazyObject;
var
  LLazy: IMVCBrLazy<TLazyObject>;
begin
  LLazy := TMVCBrLazy<TLazyObject>.Create(
    function: TLazyObject
    begin
      result := TLazyObject.Create;
    end);
  LLazy.Execute(10);
  checkTrue(LLazy.FCount = 10, 'Não Executou o LazyObject');
end;

procedure TestTMVCBrLazyObject.TestDelegate;
begin
  lzObject.Add<TLazyObject>(1).DelegateTo(
    function: TLazyObject
    begin
      result := TLazyObject.Create;
    end).instance;

  checkTrue(lzObject.Query(1).IsCreated, 'Não inicilizou');

  checkTrue(lzObject.Query(1).instance.InheritsFrom(TLazyObject),
    'Não inicilizou TLazyObject');

end;

procedure TestTMVCBrLazyObject.TestFreeInstance;
begin
  lzObject.Add(1, TObject);
  checkTrue(lzObject.Query(1).IsCreated = false,
    'Inicializou a instance antes de chama-la');

  lzObject.Query(1).instance;
  checkTrue(lzObject.Query(1).IsCreated, 'Não incializou a instancia');

end;

procedure TestTMVCBrLazyObject.TestLazyFactoryCreate;
begin
  lzObject.Add(1, TObject);
  checkTrue(lzObject.count > 0, 'Não incluir o item');
end;

procedure TestTMVCBrLazyObject.TestQueryCommand;
begin
  lzObject.Add(1, TObject);
  lzObject.Add(2, TComponent);
  lzObject.Add(3, TObject);

  checkTrue(lzObject.Query(2).instance.InheritsFrom(TComponent),
    'Não achou o TComponent');

end;

{ TLazyObject }

procedure TLazyObject.Execute(AValue: Integer);
begin
  FCount := AValue;
end;

initialization

RegisterTest(TestTMVCBrLazyObject.Suite);

end.
