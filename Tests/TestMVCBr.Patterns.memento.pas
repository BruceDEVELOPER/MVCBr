unit TestMVCBr.Patterns.memento;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.SysUtils, System.Generics.Collections, System.Json,
  System.Classes, System.ThreadSafe, MVCBr.Patterns.Memento, System.RTTI;

type
  // Test methods for class TMVCBrMementoFactory

  TestTMVCBrMementoFactory = class(TTestCase)
  strict private
    FMVCBrMementoFactory: TMVCBrMementoFactory<string>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdd;
    procedure TestUndo;
    procedure TestMemento;
  end;

implementation

procedure TestTMVCBrMementoFactory.SetUp;
begin
  FMVCBrMementoFactory := TMVCBrMementoFactory<string>.Create;
end;

procedure TestTMVCBrMementoFactory.TearDown;
begin
  FMVCBrMementoFactory.Free;
  FMVCBrMementoFactory := nil;
end;

procedure TestTMVCBrMementoFactory.TestAdd;
var
  ReturnValue: Integer;
  AInfo: TValue;
  AId: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FMVCBrMementoFactory.Add('1','exemplo');
  CheckTrue(ReturnValue>=0);
  // TODO: Validate method results
end;

procedure TestTMVCBrMementoFactory.TestUndo;
var
  ReturnValue: TValue;
  AId: string;
begin
  // TODO: Setup method call parameters
  FMVCBrMementoFactory.add('1','x1');
  FMVCBrMementoFactory.add('1','x2');
  ReturnValue := FMVCBrMementoFactory.Undo('1');
  CheckTrue( ReturnValue.AsString = 'x2','esperado x2, retornou: '+ ReturnValue.AsString);
  // TODO: Validate method results
end;

procedure TestTMVCBrMementoFactory.TestMemento;
var
  ReturnValue: TMVCBrMementoList<string>;
begin
  ReturnValue := FMVCBrMementoFactory.Memento;
  checkNotNull(ReturnValue);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTMVCBrMementoFactory.Suite);
end.

