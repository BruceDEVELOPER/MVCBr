unit TestMVCBr.Patterns;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, System.SysUtils, System.Generics.Collections, System.JSON,
  System.TypInfo, System.Classes, MVCBr.Interf, MVCBr.Patterns.States;

type
  // Test methods for class TMVCBrStates

  TTestMVCBrStateStep = class(TMVCBrStateStep)

  end;

  TestTMVCBrStates = class(TTestCase)
  strict private
    FMVCBrStates: TMVCBrStates<TTestMVCBrStateStep>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdd;
    procedure TestEOF;
    procedure TestBOF;
    procedure TestPrior;
    procedure TestNext;
    procedure TestFirst;
    procedure TestLast;
    procedure TestCurrentStep;
    procedure TestMoveTo;
    procedure TestSetFirstStep;
    procedure TestSetLastStep;
    procedure TestExecuteDelegate;
  end;

implementation

procedure TestTMVCBrStates.SetUp;
begin
  FMVCBrStates := TMVCBrStates<TTestMVCBrStateStep>.Create;
end;

procedure TestTMVCBrStates.TearDown;
begin
  FMVCBrStates.Free;
  FMVCBrStates := nil;
end;

procedure TestTMVCBrStates.TestAdd;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
begin
  TThread.NameThreadForDebugging('TestAdd');
  // TODO: Setup method call parameters
  ReturnValue := FMVCBrStates.Add<IMVCBrStateStep>(TTestMVCBrStateStep);
  CheckNotNull(ReturnValue, 'Deveria retornar um object instanciado');
  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestEOF;
var
  ReturnValue: Boolean;
begin
  TThread.NameThreadForDebugging('TestEOF');
  FMVCBrStates.MoveTo(9999);
  ReturnValue := FMVCBrStates.EOF;
  checkTrue(ReturnValue, 'Object não se posicionou EOF');

  TestAdd;
  ReturnValue := FMVCBrStates.EOF;
  checkFalse(ReturnValue, 'Object não se posicionou EOF');

  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestBOF;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FMVCBrStates.BOF;
  checkTrue(ReturnValue, 'deveria inciar como BOF');
  TestAdd;

  ReturnValue := FMVCBrStates.BOF;
  checkFalse(ReturnValue, 'deveria esta iniciado');

  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestPrior;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
begin
  TThread.NameThreadForDebugging('testprior');
  checkTrue(FMVCBrStates.EOF, 'Nao apontou para EOF, mesmo nao tendo itens');

  TestAdd;
  if not FMVCBrStates.EOF then
  begin
    ReturnValue := FMVCBrStates.Prior;
    CheckNull(ReturnValue,
      'Deveria retornar NULL, so 1 item na lista.. o prior é -1');
    checkTrue(FMVCBrStates.BOF, 'Nao apontou para BOF, mesmo nao tendo itens');
  end;
  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestNext;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
begin
  TThread.NameThreadForDebugging('TestNext');
  if not FMVCBrStates.EOF then
    ReturnValue := FMVCBrStates.Next;

  TestAdd;
  TestAdd;

  ReturnValue := FMVCBrStates.CurrentStep;

  CheckNotNull(ReturnValue);

  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestFirst;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
begin
  TestAdd;
  TestAdd;

  checkTrue(FMVCBrStates.CurrenteIndex = 1);

  ReturnValue := FMVCBrStates.First;
  checkTrue(FMVCBrStates.CurrenteIndex = 0);
  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestLast;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
begin
  TestAdd;
  TestAdd;
  ReturnValue := FMVCBrStates.Last;
  checkTrue(FMVCBrStates.CurrenteIndex = 1);
  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestCurrentStep;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
begin
  TestAdd;
  ReturnValue := FMVCBrStates.CurrentStep;
  checkTrue(FMVCBrStates.CurrenteIndex = 0);
  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestMoveTo;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
  AStep: Integer;
begin
  // TODO: Setup method call parameters
  TestAdd;
  TestAdd;
  TestAdd;
  TestAdd;
  TestAdd;
  ReturnValue := FMVCBrStates.MoveTo(1);
  checkTrue(FMVCBrStates.CurrenteIndex = 1);
  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestSetFirstStep;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
  AStep: Integer;
begin
  // TODO: Setup method call parameters
  TestAdd;
  TestAdd;
  TestAdd;
  ReturnValue := FMVCBrStates.SetFirstStep(1);
  FMVCBrStates.First;
  checkTrue(FMVCBrStates.CurrenteIndex = 1);
  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestSetLastStep;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
  ASetp: Integer;
begin
  // TODO: Setup method call parameters
  TestAdd;
  TestAdd;
  TestAdd;
  TestAdd;
  TestAdd;
  TestAdd;
  TestAdd;
  ReturnValue := FMVCBrStates.SetLastStep(2);
  FMVCBrStates.Last;
  checkTrue(FMVCBrStates.CurrenteIndex = 2);
  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestExecuteDelegate;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
  FRef: Integer;
begin
  TThread.NameThreadForDebugging('TestExecuteDelegate');

  FRef := 0;

  TestAdd;
  FMVCBrStates.CurrentStep.Delegate(
    procedure(sender: IMVCBrStateStep)
    begin
      inc(FRef);
    end);

  TestAdd;
  FMVCBrStates.CurrentStep.Delegate(
    procedure(sender: IMVCBrStateStep)
    begin
      inc(FRef);
    end);

  TestAdd;
  FMVCBrStates.CurrentStep.Delegate(
    procedure(sender: IMVCBrStateStep)
    begin
      inc(FRef);
    end);

  // TODO: Validate method results
  checkTrue(FRef = 0);

  FMVCBrStates.first;
  checkTrue(FRef = 1);


end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTMVCBrStates.Suite);

end.
