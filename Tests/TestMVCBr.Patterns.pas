unit TestMVCBr.Patterns;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, System.SysUtils, System.Generics.Collections, System.JSON,
  System.TypInfo, System.Classes, MVCBr.Interf, MVCBr.Patterns.States,
  MVCBr.Patterns.Factory;

type
  // Test methods for class TMVCBrStates

  TTestMVCBrStateStep = class(TMVCBrStateStep)

  end;

  TestTMVCBrStates = class(TTestCase)
  strict private
    FMVCBrStates: TMVCBrStates<TTestMVCBrStateStep>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdd;
    procedure TestEOF;
    procedure TestBOF;
    procedure TestPrior;
    procedure TestNext;
    procedure TestFirst;
    procedure TestLast;
    procedure TestCurrentStep;
    procedure TestMoveTo;
    procedure TestSetFirstStep;
    procedure TestSetLastStep;
    procedure TestExecuteDelegate;
  end;
  // Test methods for class TMVCBrFactory

  TestTMVCBrFactory = class(TTestCase)
  strict private
    FMVCBrFactory: TMVCBrFactory;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSetUnsafe;
    procedure TestNewInstance;
    procedure TestThis;
    procedure TestLock;
    procedure TestUnLock;
    procedure TestRelease;
  end;
  // Test methods for class TMVCBrSingletonFactory

  TestTMVCBrSingletonFactory = class(TTestCase)
  strict private
    FMVCBrSingletonFactory: TMVCBrSingletonFactory<TObject>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestDefault;
    procedure TestRelease;
  end;
  // Test methods for class TMVCBrBuilderFactory

  TestTMVCBrBuilderFactory = class(TTestCase)
  strict private
    FMVCBrBuilderFactory: TMVCBrBuilderFactory<TObject>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestBuilder;
  end;
  // Test methods for class TMVCBrAggregatedFactory

  TestTMVCBrAggregatedFactory = class(TTestCase)
  strict private
    FMVCBrAggregatedFactory: TMVCBrAggregatedFactory;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
  end;
  // Test methods for class TMVCBrContainedFactory

  TestTMVCBrContainedFactory = class(TTestCase)
  strict private
    FMVCBrContainedFactory: TMVCBrContainedFactory;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
  end;
  // Test methods for class TMVCBrHelperFactory

  TestTMVCBrHelperFactory = class(TTestCase)
  strict private
    FMVCBrHelperFactory: TMVCBrHelperFactory<TObject>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  end;
  // Test methods for class TMVCBrStaticFactory

  TestTMVCBrStaticFactory = class(TTestCase)
  strict private
    FMVCBrStaticFactory: TMVCBrStaticFactory<TInterfacedObject>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  end;

implementation

procedure TestTMVCBrStates.SetUp;
begin
  FMVCBrStates := TMVCBrStates<TTestMVCBrStateStep>.Create;
end;

procedure TestTMVCBrStates.TearDown;
begin
  FMVCBrStates.Free;
  FMVCBrStates := nil;
end;

procedure TestTMVCBrStates.TestAdd;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
begin
  TThread.NameThreadForDebugging('TestAdd');
  // TODO: Setup method call parameters
  ReturnValue := FMVCBrStates.Add<IMVCBrStateStep>(TTestMVCBrStateStep);
  CheckNotNull(ReturnValue, 'Deveria retornar um object instanciado');
  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestEOF;
var
  ReturnValue: Boolean;
begin
  TThread.NameThreadForDebugging('TestEOF');
  FMVCBrStates.MoveTo(9999);
  ReturnValue := FMVCBrStates.EOF;
  checkTrue(ReturnValue, 'Object não se posicionou EOF');

  TestAdd;
  ReturnValue := FMVCBrStates.EOF;
  checkFalse(ReturnValue, 'Object não se posicionou EOF');

  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestBOF;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FMVCBrStates.BOF;
  checkTrue(ReturnValue, 'deveria inciar como BOF');
  TestAdd;

  ReturnValue := FMVCBrStates.BOF;
  checkFalse(ReturnValue, 'deveria esta iniciado');

  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestPrior;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
begin
  TThread.NameThreadForDebugging('testprior');
  checkTrue(FMVCBrStates.EOF, 'Nao apontou para EOF, mesmo nao tendo itens');

  TestAdd;
  if not FMVCBrStates.EOF then
  begin
    ReturnValue := FMVCBrStates.Prior;
    CheckNull(ReturnValue,
      'Deveria retornar NULL, so 1 item na lista.. o prior é -1');
    checkTrue(FMVCBrStates.BOF, 'Nao apontou para BOF, mesmo nao tendo itens');
  end;
  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestNext;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
begin
  TThread.NameThreadForDebugging('TestNext');
  if not FMVCBrStates.EOF then
    ReturnValue := FMVCBrStates.Next;

  TestAdd;
  TestAdd;

  ReturnValue := FMVCBrStates.CurrentStep;

  CheckNotNull(ReturnValue);

  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestFirst;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
begin
  TestAdd;
  TestAdd;

  checkTrue(FMVCBrStates.CurrenteIndex = 1);

  ReturnValue := FMVCBrStates.First;
  checkTrue(FMVCBrStates.CurrenteIndex = 0);
  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestLast;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
begin
  TestAdd;
  TestAdd;
  ReturnValue := FMVCBrStates.Last;
  checkTrue(FMVCBrStates.CurrenteIndex = 1);
  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestCurrentStep;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
begin
  TestAdd;
  ReturnValue := FMVCBrStates.CurrentStep;
  checkTrue(FMVCBrStates.CurrenteIndex = 0);
  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestMoveTo;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
  AStep: Integer;
begin
  // TODO: Setup method call parameters
  TestAdd;
  TestAdd;
  TestAdd;
  TestAdd;
  TestAdd;
  ReturnValue := FMVCBrStates.MoveTo(1);
  checkTrue(FMVCBrStates.CurrenteIndex = 1);
  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestSetFirstStep;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
  AStep: Integer;
begin
  // TODO: Setup method call parameters
  TestAdd;
  TestAdd;
  TestAdd;
  ReturnValue := FMVCBrStates.SetFirstStep(1);
  FMVCBrStates.First;
  checkTrue(FMVCBrStates.CurrenteIndex = 1);
  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestSetLastStep;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
  ASetp: Integer;
begin
  // TODO: Setup method call parameters
  TestAdd;
  TestAdd;
  TestAdd;
  TestAdd;
  TestAdd;
  TestAdd;
  TestAdd;
  ReturnValue := FMVCBrStates.SetLastStep(2);
  FMVCBrStates.Last;
  checkTrue(FMVCBrStates.CurrenteIndex = 2);
  // TODO: Validate method results
end;

procedure TestTMVCBrStates.TestExecuteDelegate;
var
  ReturnValue: TMVCBrStateSteps<TTestMVCBrStateStep>;
  FRef: Integer;
begin
  TThread.NameThreadForDebugging('TestExecuteDelegate');

  FRef := 0;

  TestAdd;
  FMVCBrStates.CurrentStep.Delegate(
    procedure(sender: IMVCBrStateStep)
    begin
      inc(FRef);
    end);

  TestAdd;
  FMVCBrStates.CurrentStep.Delegate(
    procedure(sender: IMVCBrStateStep)
    begin
      inc(FRef);
    end);

  TestAdd;
  FMVCBrStates.CurrentStep.Delegate(
    procedure(sender: IMVCBrStateStep)
    begin
      inc(FRef);
    end);

  // TODO: Validate method results
  checkTrue(FRef = 0);

  FMVCBrStates.First;
  checkTrue(FRef = 1);

end;

procedure TestTMVCBrFactory.SetUp;
begin
  FMVCBrFactory := TMVCBrFactory.Create;
end;

procedure TestTMVCBrFactory.TearDown;
begin
  FMVCBrFactory.Free;
  FMVCBrFactory := nil;
end;

procedure TestTMVCBrFactory.TestSetUnsafe;
var
  AInterface: IInterface;
begin
  // TODO: Setup method call parameters
  FMVCBrFactory.SetUnsafe(AInterface);
  // TODO: Validate method results
end;

type

  TObjectClasse = class(TInterfacedObject, IInterface)
  end;
  TObjectClasse1 = class(TInterfacedObject, IInterface)
  end;
  TObjectClasse2 = class(TInterfacedObject, IInterface)
  end;
  TObjectClasse3 = class(TInterfacedObject, IInterface)
  end;

procedure TestTMVCBrFactory.TestNewInstance;
var
  ReturnValue: IInterface;
  AClass: TClass;
begin
  // TODO: Setup method call parameters
  ReturnValue := TMVCBrFactory.NewInstance<IInterface>(TObjectClasse1);
  // TODO: Validate method results
  ReturnValue := nil;
end;

procedure TestTMVCBrFactory.TestThis;
var
  ReturnValue: TObject;
begin
  ReturnValue := FMVCBrFactory.This;
  // TODO: Validate method results
end;

procedure TestTMVCBrFactory.TestLock;
begin
  FMVCBrFactory.Lock;
  FMVCBrFactory.UnLock;
  // TODO: Validate method results
end;

procedure TestTMVCBrFactory.TestUnLock;
begin
  FMVCBrFactory.Lock;
  FMVCBrFactory.UnLock;
  // TODO: Validate method results
end;

procedure TestTMVCBrFactory.TestRelease;
begin
  FMVCBrFactory.Release;
  // TODO: Validate method results
end;

type
  TSingletonClasse = class(TInterfacedObject, IInterface)
  end;

procedure TestTMVCBrSingletonFactory.SetUp;
begin
  FMVCBrSingletonFactory := TMVCBrSingletonFactory<TObject>.Create
    (TSingletonClasse.Create)
end;

procedure TestTMVCBrSingletonFactory.TearDown;
begin
  FMVCBrSingletonFactory.Free;
  FMVCBrSingletonFactory := nil;
end;

procedure TestTMVCBrSingletonFactory.TestDefault;
var
  ReturnValue: TObject;
begin
  ReturnValue := FMVCBrSingletonFactory.Default;
  // TODO: Validate method results
end;

procedure TestTMVCBrSingletonFactory.TestRelease;
begin
  FMVCBrSingletonFactory.Release;
  // TODO: Validate method results
end;

procedure TestTMVCBrBuilderFactory.SetUp;
begin
  FMVCBrBuilderFactory := TMVCBrBuilderFactory<TObject>.Create(
    procedure(sender: TObject)
    begin

    end);
end;

procedure TestTMVCBrBuilderFactory.TearDown;
begin
  FMVCBrBuilderFactory.Free;
  FMVCBrBuilderFactory := nil;
end;

procedure TestTMVCBrBuilderFactory.TestBuilder;
var
  ReturnValue: TMVCBrBuilderFactory<TObject>;
  AObject: TObject;
begin
  // TODO: Setup method call parameters
  AObject := TObject.Create;
  try
    ReturnValue := FMVCBrBuilderFactory.Builder(AObject);
    // TODO: Validate method results
  finally
    AObject.Free;
  end;
end;

procedure TestTMVCBrAggregatedFactory.SetUp;
begin
  FMVCBrAggregatedFactory := TMVCBrAggregatedFactory.Create(TObjectClasse3.create);
end;

procedure TestTMVCBrAggregatedFactory.TearDown;
begin
  FMVCBrAggregatedFactory.free;
end;




procedure TestTMVCBrContainedFactory.SetUp;
begin
  FMVCBrContainedFactory := TMVCBrContainedFactory.Create(TObjectClasse2.create);
end;

procedure TestTMVCBrContainedFactory.TearDown;
begin
  FMVCBrContainedFactory.Free;
  FMVCBrContainedFactory := nil;
end;


procedure TestTMVCBrHelperFactory.SetUp;
begin
  FMVCBrHelperFactory := TMVCBrHelperFactory<TObject>.Create(TObjectClasse.create);
end;

procedure TestTMVCBrHelperFactory.TearDown;
begin
  FMVCBrHelperFactory.Free;
  FMVCBrHelperFactory := nil;
end;

procedure TestTMVCBrStaticFactory.SetUp;
begin
  FMVCBrStaticFactory := TMVCBrStaticFactory<TInterfacedObject>.Create(TInterfacedObject.create);
end;

procedure TestTMVCBrStaticFactory.TearDown;
begin
  FMVCBrStaticFactory.Free;
  FMVCBrStaticFactory := nil;
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTMVCBrStates.Suite);
RegisterTest(TestTMVCBrFactory.Suite);
RegisterTest(TestTMVCBrSingletonFactory.Suite);
RegisterTest(TestTMVCBrBuilderFactory.Suite);
RegisterTest(TestTMVCBrAggregatedFactory.Suite);
RegisterTest(TestTMVCBrContainedFactory.Suite);
RegisterTest(TestTMVCBrHelperFactory.Suite);
RegisterTest(TestTMVCBrStaticFactory.Suite);
end.
