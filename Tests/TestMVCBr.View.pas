unit TestMVCBr.View;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, system.SysUtils, system.Classes, Forms, MVCBr.Interf,
  MVCBr.Model,
  TestMVCBr.TestForm, MVCBr.Controller,
  MVCBr.View, system.Rtti;

type
  // Test methods for class TViewFactory

  TestTViewFactory = class(TTestCase)
  strict private
    FViewFactory: TViewFactory;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestNew;
    procedure TestShowView;
    procedure TestUpdate;
    procedure TestGetController;
  end;
  // Test methods for class TFormFactory

  TestTFormFactory = class(TTestCase)
  strict private
    FFormFactory: TTesteFormView;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetController;
    procedure TestThis;
    procedure TestInvokeMethod;
    procedure TestShowView;
    procedure TestUpdate;
  end;

implementation

procedure TestTViewFactory.SetUp;
var
  Controller: IController;
begin
  Controller := TControllerFactory.create;
  FViewFactory := TViewFactory.create;
  Controller.View(FViewFactory);
  checkNotNull(FViewFactory);
end;

procedure TestTViewFactory.TearDown;
begin
//  FViewFactory.Free;
  FViewFactory := nil;
end;

procedure TestTViewFactory.TestNew;
var
  ReturnValue: IView;
  AController: IController;
  AClass: TViewFactoryClass;
begin
  // TODO: Setup method call parameters
  AController := TControllerFactory.create;
  ReturnValue := TViewFactory.New<IView>(TViewFactory);
  CheckNotNull(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTViewFactory.TestShowView;
var
  ReturnValue: Integer;
  AProc: TProc<IView>;
begin
  // TODO: Setup method call parameters
  ReturnValue := FViewFactory.ShowView(AProc);
  CheckTrue(ReturnValue >= 0);
  // TODO: Validate method results
end;

procedure TestTViewFactory.TestUpdate;
var
  ReturnValue: IView;
begin
  ReturnValue := FViewFactory.Update;
  CheckNotNull(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTViewFactory.TestGetController;
var
  ReturnValue: IController;
begin
  ReturnValue := FViewFactory.GetController;
  // TODO: Validate method results
  CheckNotNull(ReturnValue);
end;

procedure TestTFormFactory.SetUp;
var
  Controller: IController;
begin
  Controller := TControllerFactory.create;
  FFormFactory := TTesteFormView.create(nil);
  Controller.View(FFormFactory);
end;

procedure TestTFormFactory.TearDown;
begin
  FFormFactory.Free;
  FFormFactory := nil;
end;

procedure TestTFormFactory.TestGetController;
var
  ReturnValue: IController;
begin
  ReturnValue := FFormFactory.GetController;
  CheckNotNull(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTFormFactory.TestThis;
var
  ReturnValue: TObject;
begin
  ReturnValue := FFormFactory.This;
  CheckNotNull(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTFormFactory.TestInvokeMethod;
var
  ReturnValue: Boolean;
begin
  // TODO: Setup method call parameters
  FFormFactory.InvokeMethod<Boolean>('SetShowModal', [true]);
  CheckTrue(FFormFactory.isShowModal, 'Não alterou o ShowModal');
  ReturnValue := FFormFactory.InvokeMethod<Boolean>('GetShowModal', []);
  CheckTrue(ReturnValue, 'Não funcionou RTTI');
  // TODO: Validate method results
end;

procedure TestTFormFactory.TestShowView;
var
  ReturnValue: Integer;
  AProc: TProc<IView>;
begin
  // TODO: Setup method call parameters
  FFormFactory.SetShowModal(false);
  ReturnValue := FFormFactory.ShowView(AProc);

  // TODO: Validate method results
end;

procedure TestTFormFactory.TestUpdate;
var
  ReturnValue: IView;
begin
  ReturnValue := FFormFactory.Update;
  CheckNotNull(ReturnValue);
  // TODO: Validate method results
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTViewFactory.Suite);
RegisterTest(TestTFormFactory.Suite);

end.
