unit TestMVCBrMongoModel;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  System.Classes, System.SysUtils,
  TestFramework, MVCBr.MongoModel, MVCBr.Model, MongoWire, MVCBr.Interf,
  MVCBr.Patterns.Adapter;

type
  // Test methods for class TMongoModelFactory

  TestTMongoModelFactory = class(TTestCase)
  strict private
    FMongoModelFactory: TMongoModelFactory;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGet;
    procedure TestUpdate;
    procedure TestInsert;
    procedure TestInsert1;
    procedure TestInsert2;
    procedure TestDelete;
    procedure TestPing;
    procedure TestEnsureIndex;
    procedure TestRunCommand;
    procedure TestCount;
    procedure TestDistinct;
    procedure TestEval;


    procedure TestRegEx;
    procedure TestContains;
    procedure TestBetween;
  end;

implementation

uses dialogs;

procedure TestTMongoModelFactory.SetUp;
begin
  FMongoModelFactory := TMongoModelFactory.Create;
end;

procedure TestTMongoModelFactory.TearDown;
begin
  FMongoModelFactory.Free;
  FMongoModelFactory := nil;
end;

procedure TestTMongoModelFactory.TestGet;
var
  ReturnValue: IJSONDocument;
  AWhere: IJSONDocument;
  ACollection: string;
begin
  TestInsert;
  ACollection := 'produtos';
  AWhere := TJsonDocument.new(['codigo', '1']);
  // TODO: Setup method call parameters
  ReturnValue := FMongoModelFactory.Get(ACollection, AWhere);
  // TODO: Validate method results
end;

procedure TestTMongoModelFactory.TestUpdate;
var
  AMultiUpdate: Boolean;
  AUpsert: Boolean;
  ADoc: IJSONDocument;
  AWhere: IJSONDocument;
  ACollection: string;
begin
  ACollection := 'produtos';
  AWhere := TJsonDocument.new(['codigo', '2']);
  ADoc := TJsonDocument.new(['codigo', '2', 'nome', 'produto 2', 'data', now]);
  AUpsert := true;
  // TODO: Setup method call parameters
  FMongoModelFactory.Update(ACollection, AWhere, ADoc, AUpsert, AMultiUpdate);
  // TODO: Validate method results
end;

procedure TestTMongoModelFactory.TestInsert;
var
  ADoc: IJSONDocument;
  ACollection: WideString;
begin
  ACollection := 'produtos';

  ADoc := TJsonDocument.new(['codigo', '1', 'nome', 'nome do produto']);

  FMongoModelFactory.delete(ACollection,
    TJsonDocument.new(['codigo', '1']), false);

  // TODO: Setup method call parameters
  FMongoModelFactory.Insert(ACollection, ADoc);
  // TODO: Validate method results
end;

procedure TestTMongoModelFactory.TestInsert1;
var
  ACollection: WideString;
  d1, d2: IJSONDocument;
begin
  ACollection := 'produtos';

  d1 := TJsonDocument.new(['codigo', '3', 'nome', 'produto 3']);
  d2 := TJsonDocument.new(['codigo', '4', 'nome', 'produto 4']);
  // TODO: Setup method call parameters
  FMongoModelFactory.Insert(ACollection, [d1, d2]);
  // TODO: Validate method results
end;

procedure TestTMongoModelFactory.TestInsert2;
var
  ADocs: IJSONDocArray;
  ACollection: WideString;
  d1, d2: IJSONDocument;
begin
  ACollection := 'produtos';
  d1 := TJsonDocument.new(['codigo', '3', 'nome', 'produto 3']);
  d2 := TJsonDocument.new(['codigo', '4', 'nome', 'produto 4']);

  ADocs := TJSONDocArray.new;
  ADocs.AddJson(d1.ToString);
  ADocs.AddJson(d2.ToString);
  // TODO: Setup method call parameters
  FMongoModelFactory.Insert(ACollection, ADocs);
  // TODO: Validate method results
end;

procedure TestTMongoModelFactory.TestDelete;
var
  ASingleRemove: Boolean;
  AWhere: IJSONDocument;
  ACollection: WideString;
begin
  TestInsert;
  ACollection := 'produtos';
  AWhere := TJsonDocument.new(['codigo', '1']);
  // TODO: Setup method call parameters
  FMongoModelFactory.delete(ACollection, AWhere, ASingleRemove);
  // TODO: Validate method results
end;

procedure TestTMongoModelFactory.TestPing;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FMongoModelFactory.Ping;
  // TODO: Validate method results
end;

procedure TestTMongoModelFactory.TestEnsureIndex;
var
  AOptions: IJSONDocument;
  AIndex: IJSONDocument;
  ACollection: WideString;
begin
  // TODO: Setup method call parameters
  FMongoModelFactory.EnsureIndex(ACollection, AIndex, AOptions);
  // TODO: Validate method results
end;

procedure TestTMongoModelFactory.TestRegEx;
var
  doc: IJSONDocArray;
begin
  doc := FMongoModelFactory.QueryRegEx('produtos', 'nome', 'prod');
end;

procedure TestTMongoModelFactory.TestRunCommand;
var
  ReturnValue: IJSONDocument;
  ACmdObj: IJSONDocument;
begin
  // TODO: Setup method call parameters
  ReturnValue := FMongoModelFactory.RunCommand(ACmdObj);
  // TODO: Validate method results
end;

procedure TestTMongoModelFactory.TestBetween;
var rt :IJSONDocArray;
begin
 rt:=  FMongoModelFactory.Query('produtos',[ TMongoExpression.Between('codigo','1','3'), TMongoExpression.Like('nome','prod')]);
end;

procedure TestTMongoModelFactory.TestContains;
var rt :IJSONDocArray;
begin
 rt:=  FMongoModelFactory.Query('produtos',TMongoExpression.contains('nome','rod'));
 showMessage(rt.toString);
end;


procedure TestTMongoModelFactory.TestCount;
var
  ReturnValue: Integer;
  ACollection: WideString;
begin
  TestInsert;
  ACollection := 'produtos';
  // TODO: Setup method call parameters
  ReturnValue := FMongoModelFactory.Count(ACollection);
  CheckTrue(ReturnValue > 0, 'não retornou nr linhas "count"');
  // TODO: Validate method results
end;

procedure TestTMongoModelFactory.TestDistinct;
var
  ReturnValue: Variant;
  AQuery: IJSONDocument;
  AKey: WideString;
  ACollection: WideString;
begin
  ACollection := 'produtos';
  AKey := 'codigo';
  AQuery := TJsonDocument.new(['codigo', '1']);
  // TODO: Setup method call parameters
  ReturnValue := FMongoModelFactory.Distinct(ACollection, AKey, AQuery);
  CheckTrue(ReturnValue[0] <> '');
  // TODO: Validate method results
end;

procedure TestTMongoModelFactory.TestEval;
var
  ReturnValue: Variant;
  ANoLock: Boolean;
  AArgs: array of Variant;
  AJSFn: WideString;
  ACollection: WideString;
begin
  // TODO: Setup method call parameters
  ReturnValue := FMongoModelFactory.Eval(ACollection, AJSFn, AArgs, ANoLock);
  // TODO: Validate method results
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTMongoModelFactory.Suite);

end.
